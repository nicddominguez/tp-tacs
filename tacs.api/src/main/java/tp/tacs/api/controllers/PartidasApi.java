/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.17-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package tp.tacs.api.controllers;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.threeten.bp.LocalDate;
import tp.tacs.api.model.*;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-08-29T21:54:36.724-03:00[America/Buenos_Aires]")
@Api(value = "partidas", description = "the partidas API")
public interface PartidasApi {

    @ApiOperation(value = "Actualiza el estado de una partida", nickname = "actualizarEstadoPartida", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Partidas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(value = "/partidas/{idPartida}",
        method = RequestMethod.PATCH)
    ResponseEntity<Void> actualizarEstadoPartida(@ApiParam(value = "",required=true) @PathVariable("idPartida") Integer idPartida
,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "estado", required = true) EstadoDeJuegoModel estado
);


    @ApiOperation(value = "Ataca a un municipio", nickname = "atacarMunicipio", notes = "", response = AtacarMunicipioResponse.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Partidas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = AtacarMunicipioResponse.class),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(value = "/partidas/{idPartida}/ataques",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<AtacarMunicipioResponse> atacarMunicipio(@ApiParam(value = "",required=true) @PathVariable("idPartida") Integer idPartida
,@ApiParam(value = ""  )  @Valid @RequestBody AtacarMunicipioBody body
);


    @ApiOperation(value = "Crear una nueva pertida", nickname = "crearPartida", notes = "", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Partidas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Created"),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(value = "/partidas",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> crearPartida(@ApiParam(value = ""  )  @Valid @RequestBody CrearPartidaBody body
);


    @ApiOperation(value = "Retorna la partida con id: idPartida. Incluye los datos del juego.", nickname = "getPartida", notes = "", response = PartidaModel.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Partidas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PartidaModel.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(value = "/partidas/{idPartida}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PartidaModel> getPartida(@ApiParam(value = "Id de la partida",required=true) @PathVariable("idPartida") Integer idPartida
);


    @ApiOperation(value = "Permite listar partidas. No incluye los datos de juego asociados a las mismas.", nickname = "listarPartidas", notes = "", response = PartidaModel.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Partidas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = PartidaModel.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 403, message = "Forbidden") })
    @RequestMapping(value = "/partidas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<PartidaModel>> listarPartidas(@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "page", required = true) Integer page
, @ApiParam(value = "") @Valid @RequestParam(value = "fechaInicio", required = false) LocalDate fechaInicio
, @ApiParam(value = "") @Valid @RequestParam(value = "fechaFin", required = false) LocalDate fechaFin
, @ApiParam(value = "") @Valid @RequestParam(value = "estado", required = false) EstadoDeJuegoModel estado
, @ApiParam(value = "", defaultValue = "10") @Valid @RequestParam(value = "pageSize", required = false, defaultValue="10") Integer pageSize
);


    @ApiOperation(value = "Mueve gauchos de un municipio a otro", nickname = "moverGauchos", notes = "", response = MoverGauchosResponse.class, authorizations = {
        @Authorization(value = "bearerAuth")    }, tags={ "Partidas", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = MoverGauchosResponse.class),
        @ApiResponse(code = 400, message = "Bad request"),
        @ApiResponse(code = 404, message = "Not found") })
    @RequestMapping(value = "/partidas/{idPartida}/movimientos",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<MoverGauchosResponse> moverGauchos(@ApiParam(value = "",required=true) @PathVariable("idPartida") Integer idPartida
,@ApiParam(value = ""  )  @Valid @RequestBody MoverGauchosBody body
);

}
